import React, {useRef, useState} from 'react';
import axios from "axios";
import load from "../../../assets/img/load.gif";

const SqlInjection = () => {
    const inputs = useRef(null)
    const [data, setData] = useState("")
    const [loading, setLoading] = useState("")
    console.log(data)

    function UrlHandlerSqlInjection() {
        setLoading("load")
        if (inputs.current) {

            axios.get('http://localhost:8000/pentesting/sql_injection/?url=' + inputs.current.value)
                .then(res => {
                    setData(res);
                    setLoading("noload")
                }).catch(err => {
                setData(err);
                setLoading("err")
            })

        }

    }

    return (
        <div className={"pentest_block"}>
            <h2 className={"subtitle"}>Sql инъекциясы:</h2>
            <p className={"text"} style={{marginBottom: "10px"}}>
                (SQLi) — сұрауларға зиянды SQL кодын енгізуді қамтитын веб-қосымшаға шабуыл
                дерекқорға. Шабуылдаушы құпия деректерге қол жеткізе алады, дерекқордағы деректерді өзгерте алады немесе
                тіпті оларды толығымен алып тастаңыз. SQLi пайдаланушы енгізуі дұрыс сүзілмеген кезде мүмкін
                түрде және SQL кодын дерекқор сұрауларына енгізуге мүмкіндік береді.
            </p>
            <form>
                <input className={"input"} type={"search"} ref={inputs}
                       placeholder={"Введите ваш url для проверки на уязвимость к SqlInjection атаком"}/>
                <a className={"submit--btn"} value={">"} onClick={UrlHandlerSqlInjection}>></a>
            </form>
            {loading == "load" ? <div className={"load"}>
                <img src={load}/>
                <p>Бұған бірнеше минут кетуі мүмкін...</p>
            </div> : null}

            {loading == "err" ? <div className={"load"}>
                <p>Қате......</p>
            </div> : null}

            {data.data ?
                <div>
                    <div className="code_block--pentest">
                        {data.data.SQL_Injection.map((e) => {
                            return (
                                <code>
                                    <div className={"console_title"}>{JSON.stringify(e.start).toUpperCase()}:</div>
                                    <div className={"console_text"}>{JSON.stringify(e.text)}</div>
                                </code>
                            )
                        })}
                    </div>
                </div>
                : null}
        </div>
    );
};


export default SqlInjection;